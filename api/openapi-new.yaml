openapi: 3.0.4
info:
  title: Swagger Vinyl Store - OpenAPI 3.0
  version: 1.0.4
  description: REST API for Vinyl Record Store
servers:
  - url: http://localhost:8080/api/v1
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        created_at:
          type: string
          format: date-time

    UserRegister:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
        name:
          type: string

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    Vinyl:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        price:
          type: number
        stock_count:
          type: integer
        cover_url:
          type: string
        artist_id:
          type: string
        genre_id:
          type: string
        created_at:
          type: string
          format: date-time

    VinylCreate:
      type: object
      required:
        - title
        - price
        - stock_count
        - artist_id
        - genre_id
      properties:
        title:
          type: string
        price:
          type: number
        stock_count:
          type: integer
        artist_id:
          type: string
        genre_id:
          type: string
        cover_url:
          type: string

    Artist:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        country:
          type: string
        created_at:
          type: string
          format: date-time

    ArtistCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        country:
          type: string

    Genre:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        created_at:
          type: string
          format: date-time

    GenreCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    News:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        published_at:
          type: string
          format: date-time

    NewsCreate:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
        content:
          type: string

    OrderItem:
      type: object
      properties:
        vinyl_id:
          type: string
        quantity:
          type: integer

    OrderCreate:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'

    AdminLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

paths:
  /vinyls:
    get:
      summary: Get all vinyls
      tags: [Vinyls]
      responses:
        '200': { description: OK }
    post:
      summary: Create a vinyl
      tags: [Vinyls]
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/VinylCreate' }
      responses:
        '201': { description: Created }
        '401': { description: Unauthorized }

  /vinyls/{id}:
    get:
      summary: Get vinyl by ID
      tags: [Vinyls]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not Found }
    put:
      summary: Update vinyl
      tags: [Vinyls]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/VinylCreate' }
      responses:
        '200': { description: Updated }
        '401': { description: Unauthorized }
    delete:
      summary: Delete vinyl
      tags: [Vinyls]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204': { description: Deleted }
        '401': { description: Unauthorized }

  /artists:
    get:
      summary: Get all artists
      tags: [Artists]
      responses:
        '200': { description: OK }
    post:
      summary: Create artist
      tags: [Artists]
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ArtistCreate' }
      responses:
        '201': { description: Created }

  /artists/{id}:
    put:
      summary: Update artist
      tags: [Artists]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ArtistCreate' }
      responses:
        '200': { description: Updated }
    delete:
      summary: Delete artist
      tags: [Artists]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204': { description: Deleted }

  /genres:
    get:
      summary: Get all genres
      tags: [Genres]
      responses:
        '200': { description: OK }
    post:
      summary: Create genre
      tags: [Genres]
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/GenreCreate' }
      responses:
        '201': { description: Created }

  /genres/{id}:
    put:
      summary: Update genre
      tags: [Genres]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/GenreCreate' }
      responses:
        '200': { description: Updated }
    delete:
      summary: Delete genre
      tags: [Genres]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204': { description: Deleted }
        
  /users/register:
    post:
      summary: Register a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201': { description: User registered }

  /users/login:
    post:
      summary: Login as user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200': { description: Logged in }

  /admin/login:
    post:
      summary: Login as admin
      tags: [Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLogin'
      responses:
        '200': { description: Admin logged in }

  /news:
    get:
      summary: Get all news
      tags: [News]
      responses:
        '200': { description: OK }
    post:
      summary: Create news (admin)
      tags: [News]
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/NewsCreate' }
      responses:
        '201': { description: Created }

  /news/{id}:
    get:
      summary: Get news by ID
      tags: [News]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
    delete:
      summary: Delete news (admin)
      tags: [News]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204': { description: Deleted }

  /orders:
    get:
      summary: Get all orders (user)
      tags: [Orders]
      security: [ { bearerAuth: [] } ]
      responses:
        '200': { description: OK }
    post:
      summary: Create order
      tags: [Orders]
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/OrderCreate' }
      responses:
        '201': { description: Order created }

  /orders/{id}:
    get:
      summary: Get order by ID
      tags: [Orders]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

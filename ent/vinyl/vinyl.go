// Code generated by ent, DO NOT EDIT.

package vinyl

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the vinyl type in the database.
	Label = "vinyl"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldStockCount holds the string denoting the stock_count field in the database.
	FieldStockCount = "stock_count"
	// FieldCoverURL holds the string denoting the cover_url field in the database.
	FieldCoverURL = "cover_url"
	// FieldArtistID holds the string denoting the artist_id field in the database.
	FieldArtistID = "artist_id"
	// FieldGenreID holds the string denoting the genre_id field in the database.
	FieldGenreID = "genre_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the vinyl in the database.
	Table = "vinyls"
)

// Columns holds all SQL columns for vinyl fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldPrice,
	FieldStockCount,
	FieldCoverURL,
	FieldArtistID,
	FieldGenreID,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// PriceValidator is a validator for the "price" field. It is called by the builders before save.
	PriceValidator func(float64) error
	// StockCountValidator is a validator for the "stock_count" field. It is called by the builders before save.
	StockCountValidator func(int32) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Vinyl queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByStockCount orders the results by the stock_count field.
func ByStockCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStockCount, opts...).ToFunc()
}

// ByCoverURL orders the results by the cover_url field.
func ByCoverURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoverURL, opts...).ToFunc()
}

// ByArtistID orders the results by the artist_id field.
func ByArtistID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArtistID, opts...).ToFunc()
}

// ByGenreID orders the results by the genre_id field.
func ByGenreID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGenreID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

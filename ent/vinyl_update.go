// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"vinyl-store/ent/predicate"
	"vinyl-store/ent/vinyl"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// VinylUpdate is the builder for updating Vinyl entities.
type VinylUpdate struct {
	config
	hooks    []Hook
	mutation *VinylMutation
}

// Where appends a list predicates to the VinylUpdate builder.
func (vu *VinylUpdate) Where(ps ...predicate.Vinyl) *VinylUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetTitle sets the "title" field.
func (vu *VinylUpdate) SetTitle(s string) *VinylUpdate {
	vu.mutation.SetTitle(s)
	return vu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (vu *VinylUpdate) SetNillableTitle(s *string) *VinylUpdate {
	if s != nil {
		vu.SetTitle(*s)
	}
	return vu
}

// SetPrice sets the "price" field.
func (vu *VinylUpdate) SetPrice(f float64) *VinylUpdate {
	vu.mutation.ResetPrice()
	vu.mutation.SetPrice(f)
	return vu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (vu *VinylUpdate) SetNillablePrice(f *float64) *VinylUpdate {
	if f != nil {
		vu.SetPrice(*f)
	}
	return vu
}

// AddPrice adds f to the "price" field.
func (vu *VinylUpdate) AddPrice(f float64) *VinylUpdate {
	vu.mutation.AddPrice(f)
	return vu
}

// SetStockCount sets the "stock_count" field.
func (vu *VinylUpdate) SetStockCount(i int32) *VinylUpdate {
	vu.mutation.ResetStockCount()
	vu.mutation.SetStockCount(i)
	return vu
}

// SetNillableStockCount sets the "stock_count" field if the given value is not nil.
func (vu *VinylUpdate) SetNillableStockCount(i *int32) *VinylUpdate {
	if i != nil {
		vu.SetStockCount(*i)
	}
	return vu
}

// AddStockCount adds i to the "stock_count" field.
func (vu *VinylUpdate) AddStockCount(i int32) *VinylUpdate {
	vu.mutation.AddStockCount(i)
	return vu
}

// SetCoverURL sets the "cover_url" field.
func (vu *VinylUpdate) SetCoverURL(s string) *VinylUpdate {
	vu.mutation.SetCoverURL(s)
	return vu
}

// SetNillableCoverURL sets the "cover_url" field if the given value is not nil.
func (vu *VinylUpdate) SetNillableCoverURL(s *string) *VinylUpdate {
	if s != nil {
		vu.SetCoverURL(*s)
	}
	return vu
}

// ClearCoverURL clears the value of the "cover_url" field.
func (vu *VinylUpdate) ClearCoverURL() *VinylUpdate {
	vu.mutation.ClearCoverURL()
	return vu
}

// SetArtistID sets the "artist_id" field.
func (vu *VinylUpdate) SetArtistID(u uuid.UUID) *VinylUpdate {
	vu.mutation.SetArtistID(u)
	return vu
}

// SetNillableArtistID sets the "artist_id" field if the given value is not nil.
func (vu *VinylUpdate) SetNillableArtistID(u *uuid.UUID) *VinylUpdate {
	if u != nil {
		vu.SetArtistID(*u)
	}
	return vu
}

// SetGenreID sets the "genre_id" field.
func (vu *VinylUpdate) SetGenreID(u uuid.UUID) *VinylUpdate {
	vu.mutation.SetGenreID(u)
	return vu
}

// SetNillableGenreID sets the "genre_id" field if the given value is not nil.
func (vu *VinylUpdate) SetNillableGenreID(u *uuid.UUID) *VinylUpdate {
	if u != nil {
		vu.SetGenreID(*u)
	}
	return vu
}

// Mutation returns the VinylMutation object of the builder.
func (vu *VinylUpdate) Mutation() *VinylMutation {
	return vu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VinylUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VinylUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VinylUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VinylUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VinylUpdate) check() error {
	if v, ok := vu.mutation.Title(); ok {
		if err := vinyl.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Vinyl.title": %w`, err)}
		}
	}
	if v, ok := vu.mutation.Price(); ok {
		if err := vinyl.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Vinyl.price": %w`, err)}
		}
	}
	if v, ok := vu.mutation.StockCount(); ok {
		if err := vinyl.StockCountValidator(v); err != nil {
			return &ValidationError{Name: "stock_count", err: fmt.Errorf(`ent: validator failed for field "Vinyl.stock_count": %w`, err)}
		}
	}
	return nil
}

func (vu *VinylUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vinyl.Table, vinyl.Columns, sqlgraph.NewFieldSpec(vinyl.FieldID, field.TypeUUID))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Title(); ok {
		_spec.SetField(vinyl.FieldTitle, field.TypeString, value)
	}
	if value, ok := vu.mutation.Price(); ok {
		_spec.SetField(vinyl.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := vu.mutation.AddedPrice(); ok {
		_spec.AddField(vinyl.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := vu.mutation.StockCount(); ok {
		_spec.SetField(vinyl.FieldStockCount, field.TypeInt32, value)
	}
	if value, ok := vu.mutation.AddedStockCount(); ok {
		_spec.AddField(vinyl.FieldStockCount, field.TypeInt32, value)
	}
	if value, ok := vu.mutation.CoverURL(); ok {
		_spec.SetField(vinyl.FieldCoverURL, field.TypeString, value)
	}
	if vu.mutation.CoverURLCleared() {
		_spec.ClearField(vinyl.FieldCoverURL, field.TypeString)
	}
	if value, ok := vu.mutation.ArtistID(); ok {
		_spec.SetField(vinyl.FieldArtistID, field.TypeUUID, value)
	}
	if value, ok := vu.mutation.GenreID(); ok {
		_spec.SetField(vinyl.FieldGenreID, field.TypeUUID, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vinyl.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VinylUpdateOne is the builder for updating a single Vinyl entity.
type VinylUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VinylMutation
}

// SetTitle sets the "title" field.
func (vuo *VinylUpdateOne) SetTitle(s string) *VinylUpdateOne {
	vuo.mutation.SetTitle(s)
	return vuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (vuo *VinylUpdateOne) SetNillableTitle(s *string) *VinylUpdateOne {
	if s != nil {
		vuo.SetTitle(*s)
	}
	return vuo
}

// SetPrice sets the "price" field.
func (vuo *VinylUpdateOne) SetPrice(f float64) *VinylUpdateOne {
	vuo.mutation.ResetPrice()
	vuo.mutation.SetPrice(f)
	return vuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (vuo *VinylUpdateOne) SetNillablePrice(f *float64) *VinylUpdateOne {
	if f != nil {
		vuo.SetPrice(*f)
	}
	return vuo
}

// AddPrice adds f to the "price" field.
func (vuo *VinylUpdateOne) AddPrice(f float64) *VinylUpdateOne {
	vuo.mutation.AddPrice(f)
	return vuo
}

// SetStockCount sets the "stock_count" field.
func (vuo *VinylUpdateOne) SetStockCount(i int32) *VinylUpdateOne {
	vuo.mutation.ResetStockCount()
	vuo.mutation.SetStockCount(i)
	return vuo
}

// SetNillableStockCount sets the "stock_count" field if the given value is not nil.
func (vuo *VinylUpdateOne) SetNillableStockCount(i *int32) *VinylUpdateOne {
	if i != nil {
		vuo.SetStockCount(*i)
	}
	return vuo
}

// AddStockCount adds i to the "stock_count" field.
func (vuo *VinylUpdateOne) AddStockCount(i int32) *VinylUpdateOne {
	vuo.mutation.AddStockCount(i)
	return vuo
}

// SetCoverURL sets the "cover_url" field.
func (vuo *VinylUpdateOne) SetCoverURL(s string) *VinylUpdateOne {
	vuo.mutation.SetCoverURL(s)
	return vuo
}

// SetNillableCoverURL sets the "cover_url" field if the given value is not nil.
func (vuo *VinylUpdateOne) SetNillableCoverURL(s *string) *VinylUpdateOne {
	if s != nil {
		vuo.SetCoverURL(*s)
	}
	return vuo
}

// ClearCoverURL clears the value of the "cover_url" field.
func (vuo *VinylUpdateOne) ClearCoverURL() *VinylUpdateOne {
	vuo.mutation.ClearCoverURL()
	return vuo
}

// SetArtistID sets the "artist_id" field.
func (vuo *VinylUpdateOne) SetArtistID(u uuid.UUID) *VinylUpdateOne {
	vuo.mutation.SetArtistID(u)
	return vuo
}

// SetNillableArtistID sets the "artist_id" field if the given value is not nil.
func (vuo *VinylUpdateOne) SetNillableArtistID(u *uuid.UUID) *VinylUpdateOne {
	if u != nil {
		vuo.SetArtistID(*u)
	}
	return vuo
}

// SetGenreID sets the "genre_id" field.
func (vuo *VinylUpdateOne) SetGenreID(u uuid.UUID) *VinylUpdateOne {
	vuo.mutation.SetGenreID(u)
	return vuo
}

// SetNillableGenreID sets the "genre_id" field if the given value is not nil.
func (vuo *VinylUpdateOne) SetNillableGenreID(u *uuid.UUID) *VinylUpdateOne {
	if u != nil {
		vuo.SetGenreID(*u)
	}
	return vuo
}

// Mutation returns the VinylMutation object of the builder.
func (vuo *VinylUpdateOne) Mutation() *VinylMutation {
	return vuo.mutation
}

// Where appends a list predicates to the VinylUpdate builder.
func (vuo *VinylUpdateOne) Where(ps ...predicate.Vinyl) *VinylUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VinylUpdateOne) Select(field string, fields ...string) *VinylUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vinyl entity.
func (vuo *VinylUpdateOne) Save(ctx context.Context) (*Vinyl, error) {
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VinylUpdateOne) SaveX(ctx context.Context) *Vinyl {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VinylUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VinylUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VinylUpdateOne) check() error {
	if v, ok := vuo.mutation.Title(); ok {
		if err := vinyl.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Vinyl.title": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.Price(); ok {
		if err := vinyl.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Vinyl.price": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.StockCount(); ok {
		if err := vinyl.StockCountValidator(v); err != nil {
			return &ValidationError{Name: "stock_count", err: fmt.Errorf(`ent: validator failed for field "Vinyl.stock_count": %w`, err)}
		}
	}
	return nil
}

func (vuo *VinylUpdateOne) sqlSave(ctx context.Context) (_node *Vinyl, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vinyl.Table, vinyl.Columns, sqlgraph.NewFieldSpec(vinyl.FieldID, field.TypeUUID))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Vinyl.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vinyl.FieldID)
		for _, f := range fields {
			if !vinyl.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vinyl.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Title(); ok {
		_spec.SetField(vinyl.FieldTitle, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Price(); ok {
		_spec.SetField(vinyl.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := vuo.mutation.AddedPrice(); ok {
		_spec.AddField(vinyl.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := vuo.mutation.StockCount(); ok {
		_spec.SetField(vinyl.FieldStockCount, field.TypeInt32, value)
	}
	if value, ok := vuo.mutation.AddedStockCount(); ok {
		_spec.AddField(vinyl.FieldStockCount, field.TypeInt32, value)
	}
	if value, ok := vuo.mutation.CoverURL(); ok {
		_spec.SetField(vinyl.FieldCoverURL, field.TypeString, value)
	}
	if vuo.mutation.CoverURLCleared() {
		_spec.ClearField(vinyl.FieldCoverURL, field.TypeString)
	}
	if value, ok := vuo.mutation.ArtistID(); ok {
		_spec.SetField(vinyl.FieldArtistID, field.TypeUUID, value)
	}
	if value, ok := vuo.mutation.GenreID(); ok {
		_spec.SetField(vinyl.FieldGenreID, field.TypeUUID, value)
	}
	_node = &Vinyl{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vinyl.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}

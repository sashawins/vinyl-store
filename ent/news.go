// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"vinyl-store/ent/news"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// News is the model entity for the News schema.
type News struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// PublishedAt holds the value of the "published_at" field.
	PublishedAt  time.Time `json:"published_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*News) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case news.FieldTitle, news.FieldContent:
			values[i] = new(sql.NullString)
		case news.FieldPublishedAt:
			values[i] = new(sql.NullTime)
		case news.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the News fields.
func (n *News) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case news.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				n.ID = *value
			}
		case news.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				n.Title = value.String
			}
		case news.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				n.Content = value.String
			}
		case news.FieldPublishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field published_at", values[i])
			} else if value.Valid {
				n.PublishedAt = value.Time
			}
		default:
			n.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the News.
// This includes values selected through modifiers, order, etc.
func (n *News) Value(name string) (ent.Value, error) {
	return n.selectValues.Get(name)
}

// Update returns a builder for updating this News.
// Note that you need to call News.Unwrap() before calling this method if this News
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *News) Update() *NewsUpdateOne {
	return NewNewsClient(n.config).UpdateOne(n)
}

// Unwrap unwraps the News entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *News) Unwrap() *News {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: News is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *News) String() string {
	var builder strings.Builder
	builder.WriteString("News(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("title=")
	builder.WriteString(n.Title)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(n.Content)
	builder.WriteString(", ")
	builder.WriteString("published_at=")
	builder.WriteString(n.PublishedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NewsSlice is a parsable slice of News.
type NewsSlice []*News

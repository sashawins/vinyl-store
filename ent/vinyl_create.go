// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"vinyl-store/ent/vinyl"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// VinylCreate is the builder for creating a Vinyl entity.
type VinylCreate struct {
	config
	mutation *VinylMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (vc *VinylCreate) SetTitle(s string) *VinylCreate {
	vc.mutation.SetTitle(s)
	return vc
}

// SetPrice sets the "price" field.
func (vc *VinylCreate) SetPrice(f float64) *VinylCreate {
	vc.mutation.SetPrice(f)
	return vc
}

// SetStockCount sets the "stock_count" field.
func (vc *VinylCreate) SetStockCount(i int32) *VinylCreate {
	vc.mutation.SetStockCount(i)
	return vc
}

// SetCoverURL sets the "cover_url" field.
func (vc *VinylCreate) SetCoverURL(s string) *VinylCreate {
	vc.mutation.SetCoverURL(s)
	return vc
}

// SetNillableCoverURL sets the "cover_url" field if the given value is not nil.
func (vc *VinylCreate) SetNillableCoverURL(s *string) *VinylCreate {
	if s != nil {
		vc.SetCoverURL(*s)
	}
	return vc
}

// SetArtistID sets the "artist_id" field.
func (vc *VinylCreate) SetArtistID(u uuid.UUID) *VinylCreate {
	vc.mutation.SetArtistID(u)
	return vc
}

// SetGenreID sets the "genre_id" field.
func (vc *VinylCreate) SetGenreID(u uuid.UUID) *VinylCreate {
	vc.mutation.SetGenreID(u)
	return vc
}

// SetCreatedAt sets the "created_at" field.
func (vc *VinylCreate) SetCreatedAt(t time.Time) *VinylCreate {
	vc.mutation.SetCreatedAt(t)
	return vc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vc *VinylCreate) SetNillableCreatedAt(t *time.Time) *VinylCreate {
	if t != nil {
		vc.SetCreatedAt(*t)
	}
	return vc
}

// SetID sets the "id" field.
func (vc *VinylCreate) SetID(u uuid.UUID) *VinylCreate {
	vc.mutation.SetID(u)
	return vc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vc *VinylCreate) SetNillableID(u *uuid.UUID) *VinylCreate {
	if u != nil {
		vc.SetID(*u)
	}
	return vc
}

// Mutation returns the VinylMutation object of the builder.
func (vc *VinylCreate) Mutation() *VinylMutation {
	return vc.mutation
}

// Save creates the Vinyl in the database.
func (vc *VinylCreate) Save(ctx context.Context) (*Vinyl, error) {
	vc.defaults()
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VinylCreate) SaveX(ctx context.Context) *Vinyl {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VinylCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VinylCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *VinylCreate) defaults() {
	if _, ok := vc.mutation.CreatedAt(); !ok {
		v := vinyl.DefaultCreatedAt()
		vc.mutation.SetCreatedAt(v)
	}
	if _, ok := vc.mutation.ID(); !ok {
		v := vinyl.DefaultID()
		vc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VinylCreate) check() error {
	if _, ok := vc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Vinyl.title"`)}
	}
	if v, ok := vc.mutation.Title(); ok {
		if err := vinyl.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Vinyl.title": %w`, err)}
		}
	}
	if _, ok := vc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Vinyl.price"`)}
	}
	if v, ok := vc.mutation.Price(); ok {
		if err := vinyl.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Vinyl.price": %w`, err)}
		}
	}
	if _, ok := vc.mutation.StockCount(); !ok {
		return &ValidationError{Name: "stock_count", err: errors.New(`ent: missing required field "Vinyl.stock_count"`)}
	}
	if v, ok := vc.mutation.StockCount(); ok {
		if err := vinyl.StockCountValidator(v); err != nil {
			return &ValidationError{Name: "stock_count", err: fmt.Errorf(`ent: validator failed for field "Vinyl.stock_count": %w`, err)}
		}
	}
	if _, ok := vc.mutation.ArtistID(); !ok {
		return &ValidationError{Name: "artist_id", err: errors.New(`ent: missing required field "Vinyl.artist_id"`)}
	}
	if _, ok := vc.mutation.GenreID(); !ok {
		return &ValidationError{Name: "genre_id", err: errors.New(`ent: missing required field "Vinyl.genre_id"`)}
	}
	if _, ok := vc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Vinyl.created_at"`)}
	}
	return nil
}

func (vc *VinylCreate) sqlSave(ctx context.Context) (*Vinyl, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VinylCreate) createSpec() (*Vinyl, *sqlgraph.CreateSpec) {
	var (
		_node = &Vinyl{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(vinyl.Table, sqlgraph.NewFieldSpec(vinyl.FieldID, field.TypeUUID))
	)
	if id, ok := vc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := vc.mutation.Title(); ok {
		_spec.SetField(vinyl.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := vc.mutation.Price(); ok {
		_spec.SetField(vinyl.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := vc.mutation.StockCount(); ok {
		_spec.SetField(vinyl.FieldStockCount, field.TypeInt32, value)
		_node.StockCount = value
	}
	if value, ok := vc.mutation.CoverURL(); ok {
		_spec.SetField(vinyl.FieldCoverURL, field.TypeString, value)
		_node.CoverURL = value
	}
	if value, ok := vc.mutation.ArtistID(); ok {
		_spec.SetField(vinyl.FieldArtistID, field.TypeUUID, value)
		_node.ArtistID = value
	}
	if value, ok := vc.mutation.GenreID(); ok {
		_spec.SetField(vinyl.FieldGenreID, field.TypeUUID, value)
		_node.GenreID = value
	}
	if value, ok := vc.mutation.CreatedAt(); ok {
		_spec.SetField(vinyl.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// VinylCreateBulk is the builder for creating many Vinyl entities in bulk.
type VinylCreateBulk struct {
	config
	err      error
	builders []*VinylCreate
}

// Save creates the Vinyl entities in the database.
func (vcb *VinylCreateBulk) Save(ctx context.Context) ([]*Vinyl, error) {
	if vcb.err != nil {
		return nil, vcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Vinyl, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VinylMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VinylCreateBulk) SaveX(ctx context.Context) []*Vinyl {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VinylCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VinylCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
